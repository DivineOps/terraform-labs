# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  connectionType: 'Azure Resource Manager'
  azureSubscriptionEndpoint: 'ServiceConnectionName'
  azureResourceGroup: '$(PREFIX)-aks-rg'
  kubernetesCluster: '$(PREFIX)-aks'
  dockerRegistryServiceConnection: 'eaa59aca-42ba-4064-8d77-e7668962622c'
  imageRepository: 'divineopsterraformlabs'
  containerRegistry: '$(PREFIX)aksacr.azurecr.io'
  dockerfilePath: './golang/mywebapi/Dockerfile'
  chartPath: './golang/mywebapi/charts/mywebapi'
  buildContext: './golang/mywebapi'
  tag: '$(Build.BuildId)'
  imagePullSecret: '$(PREFIX)aksacrf709-auth'
  namespace: 'golang-app'
  hostname: 'mywebapi'
  dockerAuthSecretName: 'aks1aksdockerauth'
  releaseName: 'mywebapi'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage

  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
      
    steps:

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
        azureContainerRegistry: '$(containerRegistry)'
        dockerFile: '$(dockerfilePath)'
        imageName: '$(containerRegistry)/$(hostname):$(Build.BuildId)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '$(buildContext)'

    - task: Docker@1
      displayName: 'Push an image'
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
        azureContainerRegistry: '$(containerRegistry)'
        command: 'Push an image'
        imageName: '$(containerRegistry)/$(hostname):$(Build.BuildId)'



- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'DivineOpsterraformlabs-1598.default'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: Kubernetes@1
            displayName: 'kubectl setup tiller environment'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              namespace: '$(namespace)'
              command: apply
              useConfigurationFile: true
              configurationType: inline
              inline: |
                kind: Namespace
                apiVersion: v1
                metadata:
                  name: $(namespace)
                spec: {}
                status: {}
              
          - task: Kubernetes@1
            displayName: 'kubectl setup tiller environment'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              namespace: '$(namespace)'
              command: apply
              useConfigurationFile: true
              configurationType: inline
              inline: |
                kind: ServiceAccount
                apiVersion: v1
                metadata:
                  name: tiller
                  namespace: $(namespace)
              
          - task: Kubernetes@1
            displayName: 'kubectl setup tiller environment'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              namespace: '$(namespace)'
              command: apply
              useConfigurationFile: true
              configurationType: inline
              inline: |
                kind: Role
                apiVersion: rbac.authorization.k8s.io/v1beta1
                metadata:
                  name: tiller-manager
                  namespace: $(namespace)
                rules:
                - apiGroups: ["", "batch", "extensions", "apps"]
                  resources: ["*"]
                  verbs: ["*"]
              
          - task: Kubernetes@1
            displayName: 'kubectl setup tiller environment'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              namespace: '$(namespace)'
              command: apply
              useConfigurationFile: true
              configurationType: inline
              inline: |
                kind: RoleBinding
                apiVersion: rbac.authorization.k8s.io/v1beta1
                metadata:
                  name: tiller-binding
                  namespace: $(namespace)
                subjects:
                - kind: ServiceAccount
                  name: tiller
                  namespace: $(namespace)
                roleRef:
                  kind: Role
                  name: tiller-manager
                  apiGroup: rbac.authorization.k8s.io
              
          - task: HelmInstaller@0
            displayName: 'Install Helm 2.11.0'
            inputs:
              helmVersion: 2.11.0
              kubectlVersion: 1.10.3
              checkLatestKubectl: false

          - task: HelmDeploy@0
            displayName: 'helm init'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscription: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              command: init

          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: '$(connectionType)'
              azureSubscription: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              namespace: '$(namespace)'
              command: upgrade
              chartType: FilePath
              chartPath: '$(chartPath)'
              releaseName: '$(releaseName)'
              waitForExecution: false
              arguments: '--set fullnameOverride=mywebapi --set image.repository=$(containerRegistry)/$(mywebapi) --set image.tag=$(Build.BuildId) --set service.port=80 --set ingress.enabled=true --set ingress.hostname=$(hostname).0ee3958d842446808949.southcentralus.aksapp.io --set imagePullSecrets={$(dockerAuthSecretName)} --timeout 900'
  